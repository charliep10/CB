DROP TABLE #ADJ_ROLE 
/*!!!UPDATE EVERY MONTH!!!*/
CREATE TABLE #ADJ_ROLE
	(ID VARCHAR(50)NULL, ADJ_ROLE VARCHAR(20)NULL)
	INSERT INTO #ADJ_ROLE
		VALUES ('10229113', 'Chat')
				,('10145623','Chat')
				,('10172939','Chat')
				,('10253953','Chat')
				,('10146551','Chat')
				,('10253635','Chat')
				,('10231461','Chat')
				,('10200624','Chat')
				,('10207689','Chat')
				,('10275608','Chat')
				,('10318817','ADM')
				,('10215222','ADM')
				,('10319736','ADM')
				,('10006631','ADM')
				,('10179503','ADM')
				,('99999999','Indirect')
				,('77777772','MSP')
				,('88888888','Web Buy Flow')
				,('OBSRW','Web')
				,('CAM','CAM')
				,('OBSR','Core')
				,('BSR','BSR')
				,('BAE I','BAE')
				,('BAE II','BAE')
				,('Busines-Acct-Exec-I','BAE')
				,('Busines-Acct-Exec-II','BAE')
				,('Sr BAE','Sr BAE')
				,('Sr-Bus-Services-Acct-Exec','Sr BAE')
				,('RAE','Retention')
				,('EAE','Enterprise')
				,('EAM','Enterprise')
				,('ESM','Enterprise')
				,('SEAE','Enterprise')
DROP TABLE #SYS_REG
CREATE TABLE #SYS_REG
	(SYS VARCHAR(100)NULL, SYS_REG VARCHAR(20)NULL)
	INSERT INTO #SYS_REG
		VALUES ('81551000-Santa Cruz','California')
				,('81551000-South Bay','California')
				,('81552000-San Francisco  CA','California')
				,('81552000-West Bay','California')
				,('81553000-Mendocino Ukiah','California')
				,('81553000-North Bay','California')
				,('81554000-Delta Valley','California')
				,('81554000-East Bay','California')
				,('81555000-Fresno','California')
				,('81556000-North Valley','California')
				,('81556000-Sacramento','California')
				,('81556000-Stockton','California')
				,('81557000-Santa Maria','California')
				,('87777000-HOUSTON NORTH','Houston')
				,('87777000-HOUSTON SOUTH','Houston')
				,('84954400-Layton North Valley','Mountain West')
				,('84954400-Lindon South Valley','Mountain West')
				,('84954400-Miller-Mid Valley','Mountain West')
				,('84958400-Tucson','Mountain West')
				,('8497-1000 North Metro','Mountain West')
				,('8497-2000 South East','Mountain West')
				,('8497-3000 North Central','Mountain West')
				,('8497-4000 South West','Mountain West')
				,('8497-5000 Mountain','Mountain West')
				,('8497-6000/7000 North Outer','Mountain West')
				,('8497-8000 Pueblo','Mountain West')
				,('8497-9000 Colorado Springs','Mountain West')
				,('8497-9000 Trinidad','Mountain West')
				,('84979500-Albuquerque','Mountain West')
				,('84979500-Las Cruces','Mountain West')
				,('84979500-Santa Fe','Mountain West')
				,('87781000-Beaverton OR','Portland')
				,('87781000-Corvallis OR','Portland')
				,('87781000-East Portland OR','Portland')
				,('87781000-Eugene OR','Portland')
				,('87781000-Longview','Portland')
				,('87781000-Salem OR','Portland')
				,('87781000-Vancouver WA','Portland')
				,('87781000-West Portland OR','Portland')
				,('84983000-Bellingham Wa','Seattle')
				,('84983100- Everett Wa','Seattle')
				,('84983200-Seattle  Wa','Seattle')
				,('84983200-Seattle Wa','Seattle')
				,('84983300-Redmond Wa','Seattle')
				,('84983400-Auburn  Wa','Seattle')
				,('84983400-Auburn Wa','Seattle')
				,('84983500-Tacoma Wa','Seattle')
				,('84983600-Bremerton  Wa','Seattle')
				,('84983600-Bremerton Wa','Seattle')
				,('84983700-Aberdeen  Wa','Seattle')
				,('84983700-Aberdeen Wa','Seattle')
				,('84983800-Olympia  Wa','Seattle')
				,('84983800-Olympia Wa','Seattle')
				,('84983900-Spokane  Wa','Seattle')
				,('84983900-Spokane Wa','Seattle')
				,('8512-1000 - Independence, MO','Twin Cities')
				,('8512-2000 - Olathe KS','Twin Cities')
				,('87721000 - Independence MO','Twin Cities')
				,('87721000 - Manitowoc','Twin Cities')
				,('87721000 - St. Paul','Twin Cities')
				,('87721500 - Minneapolis','Twin Cities')
--!!!!ELSE LEFT(td.REGION,LEN(td.REGION)-7) END AS SYS_REGION!!!!

DROP TABLE #PR_REG
CREATE TABLE #PR_REG
	(PR VARCHAR(50)NULL, PR_REG VARCHAR(20)NULL)
	INSERT INTO #PR_REG
		VALUES ('CALIFORNIA REGION','California')
				,('HOUSTON REGION','Houston')
				,('MILE HIGH REGION','Mountain West')
				,('MOUNTAIN REGION','Mountain West')
				,('MOUNTAIN WEST REGION','Mountain West')
				,('PORTLAND REGION','Portland')
				,('SEATTLE REGION','Seattle')
				,('TWIN CITIES','Twin Cities')

--------------------------------------------------------------------------------------------------------------
SELECT DISTINCT
	CASE WHEN td.SALE_DATE BETWEEN '2018-01-22' AND '2018-02-21' THEN 'SALE' ELSE NULL END AS SALE
	,CASE WHEN td.CONNECT_DATE BETWEEN '2018-01-22' AND '2018-02-21' THEN 'CONNECT' ELSE NULL END AS CONNECT
	,CASE WHEN td.CANCEL_DATE BETWEEN '2018-01-22' AND '2018-02-21' THEN 'CANCEL' ELSE NULL END AS CANCEL
	,td.ORDERID
	,td.PERNR
	,a.ADJ_ROLE
	,td.ACCOUNT_NAME
	,CAST (CASE WHEN td.SALE_DATE = '2018-01-27' THEN '2018-01-26'
		WHEN td.SALE_DATE = '2018-01-28' THEN '2018-01-26'
		WHEN td.SALE_DATE = '2018-02-03' THEN '2018-02-02'
		WHEN td.SALE_DATE = '2018-02-04' THEN '2018-02-02'
		WHEN td.SALE_DATE = '2018-02-10' THEN '2018-02-09'
		WHEN td.SALE_DATE = '2018-02-11' THEN '2018-02-09'
		WHEN td.SALE_DATE = '2018-02-17' THEN '2018-02-16'
		WHEN td.SALE_DATE = '2018-02-18' THEN '2018-02-16'
		ELSE td.SALE_DATE END AS DATE) AS SALE_DATE --UPDATE EVERY MONTH
	,CAST (CASE WHEN td.CONNECT_DATE = '2018-01-27' THEN '2018-01-26'
		WHEN td.CONNECT_DATE = '2018-01-28' THEN '2018-01-26'
		WHEN td.CONNECT_DATE = '2018-02-03' THEN '2018-02-02'
		WHEN td.CONNECT_DATE = '2018-02-04' THEN '2018-02-02'
		WHEN td.CONNECT_DATE = '2018-02-10' THEN '2018-02-09'
		WHEN td.CONNECT_DATE = '2018-02-11' THEN '2018-02-09'
		WHEN td.CONNECT_DATE = '2018-02-17' THEN '2018-02-16'
		WHEN td.CONNECT_DATE = '2018-02-18' THEN '2018-02-16'
		ELSE td.CONNECT_DATE END AS DATE) AS CONNECT_DATE --UPDATE EVERY MONTH
	,CAST (CASE WHEN td.CANCEL_DATE = '2018-01-27' THEN '2018-01-26'
		WHEN td.CANCEL_DATE = '2018-01-28' THEN '2018-01-26'
		WHEN td.CANCEL_DATE = '2018-02-03' THEN '2018-02-02'
		WHEN td.CANCEL_DATE = '2018-02-04' THEN '2018-02-02'
		WHEN td.CANCEL_DATE = '2018-02-10' THEN '2018-02-09'
		WHEN td.CANCEL_DATE = '2018-02-11' THEN '2018-02-09'
		WHEN td.CANCEL_DATE = '2018-02-17' THEN '2018-02-16'
		WHEN td.CANCEL_DATE = '2018-02-18' THEN '2018-02-16'
		ELSE td.CANCEL_DATE END AS DATE) AS CANCEL_DATE --UPDATE EVERY MONTH
	,MAX(td.DATA_EXISTING) AS DATA_EXISTING
	,MAX(td.ADDL_MODEM) AS ADDL_MODEM
	,MAX(td.DATA_SOLD) AS DATA_SOLD
	,MAX(td.VOICE_EXISTING) AS VOICE_EXISTING
	,MAX(td.ADDL_LINES) AS ADDL_LINES
	,MAX(td.VOICE_SOLD) AS VOICE_SOLD
	,MAX(td.PRI_EXISTING) AS PRI_EXISTING
	,MAX(td.ADDL_PRI) AS ADDL_PRI
	,MAX(td.PRI_SOLD) AS PRI_SOLD
	,MAX(td.BVE_EXISTING) AS BVE_EXISTING
	,MAX(td.ADDL_BVE) AS ADDL_BVE
	,MAX(td.BVE_SOLD) AS BVE_SOLD
	,MAX(td.SIP_EXISTING) AS SIP_EXISTING
	,MAX(td.ADDL_SIP) AS ADDL_SIP
	,MAX(td.SIP_SOLD) AS SIP_SOLD
	,MAX(td.VIDEO_EXISTING) AS VIDEO_EXISTING
	,MAX(td.VIDEO_SOLD) AS VIDEO_SOLD
	,MAX(td.SO_EXISTING) AS SO_EXISTING
	,MAX(td.SO_SOLD) AS SO_SOLD
--CONCATENATION FOR DATA CONNECTS
	,s.SYS_REG + 
	a.ADJ_ROLE +
	CASE WHEN td.CONNECT_DATE IS NOT NULL
		AND (td.DATA_EXISTING = 'NO'
		AND td.DATA_SOLD = 'YES')
		OR (td.DATA_EXISTING = 'YES'
		AND td.ADDL_MODEM = 'YES')
		THEN 'DATA'
		ELSE NULL END AS DATA_CONNECT
--CONCATENATION FOR VOICE CONNECTS
	,s.SYS_REG + 
	a.ADJ_ROLE ++
	CASE WHEN td.CONNECT_DATE IS NOT NULL
		AND (td.VOICE_EXISTING = 'NO'
		AND td.VOICE_SOLD = 'YES')
		OR (td.VOICE_EXISTING = 'YES'
		AND td.ADDL_LINES = 'YES')
		THEN 'VOICE'
		ELSE NULL END AS VOICE_CONNECT
--CONCATENATION FOR PRI CONNECTS
	,s.SYS_REG + 
	a.ADJ_ROLE +
	CASE WHEN td.CONNECT_DATE IS NOT NULL
		AND (td.PRI_EXISTING = 'NO'
		AND td.PRI_SOLD = 'YES')
		OR (td.PRI_EXISTING = 'YES'
		AND td.ADDL_PRI = 'YES')
		THEN 'PRI'
		ELSE NULL END AS PRI_CONNECT
--CONCATENATION FOR BVE CONNECTS
	,s.SYS_REG + 
	a.ADJ_ROLE +
	CASE WHEN td.CONNECT_DATE IS NOT NULL
		AND (td.BVE_EXISTING = 'NO'
		AND td.BVE_SOLD = 'YES')
		OR (td.BVE_EXISTING = 'YES'
		AND td.ADDL_BVE = 'YES')
		THEN 'BVE'
		ELSE NULL END AS BVE_CONNECT
--CONCATENATION FOR SIP CONNECTS
	,s.SYS_REG + 
	a.ADJ_ROLE +
	CASE WHEN td.CONNECT_DATE IS NOT NULL
		AND (td.SIP_EXISTING = 'NO'
		AND td.SIP_SOLD = 'YES')
		OR (td.SIP_EXISTING = 'YES'
		AND td.ADDL_SIP = 'YES')
		THEN 'SIP'
		ELSE NULL END AS SIP_CONNECT
--CONCATENATION FOR VIDEO CONNECTS
	,s.SYS_REG + 
	a.ADJ_ROLE +
	CASE WHEN td.CONNECT_DATE IS NOT NULL
		AND (td.VIDEO_EXISTING = 'NO'
		AND td.VIDEO_SOLD = 'YES')
		THEN 'VIDEO'
		ELSE NULL END AS VIDEO_CONNECT
--CONCATENATION FOR SMARTOFFICE CONNECTS
	,s.SYS_REG + 
	a.ADJ_ROLE +
	CASE WHEN td.CONNECT_DATE IS NOT NULL
		AND (td.SO_EXISTING = 'NO'
		AND td.SO_SOLD = 'YES')
		THEN 'SMARTOFFICE'
		ELSE NULL END AS SO_CONNECT
--CONCATENATION FOR DATA SALES
	,s.SYS_REG + 
	a.ADJ_ROLE +
	CASE WHEN td.SALE_DATE IS NOT NULL
		AND (td.DATA_EXISTING = 'NO'
		AND td.DATA_SOLD = 'YES')
		OR (td.DATA_EXISTING = 'YES'
		AND td.ADDL_MODEM = 'YES')
		THEN 'DATA'
		ELSE NULL END AS DATA_SALE
--CONCATENATION FOR VOICE SALES
	,s.SYS_REG + 
	a.ADJ_ROLE +
	CASE WHEN td.SALE_DATE IS NOT NULL
		AND (td.VOICE_EXISTING = 'NO'
		AND td.VOICE_SOLD = 'YES')
		OR (td.VOICE_EXISTING = 'YES'
		AND td.ADDL_LINES = 'YES')
		THEN 'VOICE'
		ELSE NULL END AS VOICE_SALE
--CONCATENATION FOR PRI SALES
	,p.PR_REG +
	a.ADJ_ROLE +
	CASE WHEN td.SALE_DATE IS NOT NULL
		AND (td.PRI_EXISTING = 'NO'
		AND td.PRI_SOLD = 'YES')
		OR (td.PRI_EXISTING = 'YES'
		AND td.ADDL_PRI = 'YES')
		THEN 'PRI'
		ELSE NULL END AS PRI_SALE
--CONCATENATION FOR BVE SALES
	,p.PR_REG +
	a.ADJ_ROLE +
	CASE WHEN td.SALE_DATE IS NOT NULL
		AND (td.BVE_EXISTING = 'NO'
		AND td.BVE_SOLD = 'YES')
		OR (td.BVE_EXISTING = 'YES'
		AND td.ADDL_BVE = 'YES')
		THEN 'BVE'
		ELSE NULL END AS BVE_SALE
--CONCATENATION FOR SIP SALES
	,p.PR_REG +
	a.ADJ_ROLE +
	CASE WHEN td.SALE_DATE IS NOT NULL
		AND (td.SIP_EXISTING = 'NO'
		AND td.SIP_SOLD = 'YES')
		OR (td.SIP_EXISTING = 'YES'
		AND td.ADDL_SIP = 'YES')
		THEN 'SIP'
		ELSE NULL END AS SIP_SALE
--PRI MODEL SALE CALCULATIONS
	,s.SYS_REG + 
	a.ADJ_ROLE +
	CASE WHEN td.SALE_DATE IS NOT NULL
		AND (td.PRI_EXISTING = 'NO'
		AND td.PRI_SOLD = 'YES')
		OR (td.PRI_EXISTING = 'YES'
		AND td.ADDL_PRI = 'YES')
		THEN 'PRI'
		ELSE NULL END AS PRI_MODEL_SALE
--BVE MODEL SALE CALCULATIONS
	,s.SYS_REG + 
	a.ADJ_ROLE +
	CASE WHEN td.SALE_DATE IS NOT NULL
		AND (td.BVE_EXISTING = 'NO'
		AND td.BVE_SOLD = 'YES')
		OR (td.BVE_EXISTING = 'YES'
		AND td.ADDL_BVE = 'YES')
		THEN 'BVE'
		ELSE NULL END AS BVE_MODEL_SALE
--SIP MODEL SALE CALCULATIONS
	,s.SYS_REG + 
	a.ADJ_ROLE +
	CASE WHEN td.SALE_DATE IS NOT NULL
		AND (td.SIP_EXISTING = 'NO'
		AND td.SIP_SOLD = 'YES')
		OR (td.SIP_EXISTING = 'YES'
		AND td.ADDL_SIP = 'YES')
		THEN 'SIP'
		ELSE NULL END AS SIP_MODEL_SALE
--CONCATENATION FOR VIDEO SALES
	,s.SYS_REG + 
	a.ADJ_ROLE +
	CASE WHEN td.SALE_DATE IS NOT NULL
		AND (td.VIDEO_EXISTING = 'NO'
		AND td.VIDEO_SOLD = 'YES')
		THEN 'VIDEO'
		ELSE NULL END AS VIDEO_SALE
--CONCATENATION FOR SMARTOFFICE SALES
	,s.SYS_REG + 
	a.ADJ_ROLE +
	CASE WHEN td.SALE_DATE IS NOT NULL
		AND (td.SO_EXISTING = 'NO'
		AND td.SO_SOLD = 'YES')
		THEN 'SMARTOFFICE'
		ELSE NULL END AS SO_SALE
--CONCATENATION FOR DATA CANCELS
	,s.SYS_REG + 
	a.ADJ_ROLE +
	CASE WHEN td.CANCEL_DATE IS NOT NULL
		AND (td.DATA_EXISTING = 'NO'
		AND td.DATA_SOLD = 'YES')
		OR (td.DATA_EXISTING = 'YES'
		AND td.ADDL_MODEM = 'YES')
		THEN 'DATA'
		ELSE NULL END AS DATA_CANCEL
--CONCATENATION FOR VOICE CANCELS
	,s.SYS_REG + 
	a.ADJ_ROLE +
	CASE WHEN td.CANCEL_DATE IS NOT NULL
		AND (td.VOICE_EXISTING = 'NO'
		AND td.VOICE_SOLD = 'YES')
		OR (td.VOICE_EXISTING = 'YES'
		AND td.ADDL_LINES = 'YES')
		THEN 'VOICE'
		ELSE NULL END AS VOICE_CANCEL
--CONCATENATION FOR PRI CANCELS
	,p.PR_REG +
	a.ADJ_ROLE +
	CASE WHEN td.CANCEL_DATE IS NOT NULL
		AND (td.PRI_EXISTING = 'NO'
		AND td.PRI_SOLD = 'YES')
		OR (td.PRI_EXISTING = 'YES'
		AND td.ADDL_PRI = 'YES')
		THEN 'PRI'
		ELSE NULL END AS PRI_CANCEL
--CONCATENATION FOR BVE CANCELS
	,p.PR_REG +
	a.ADJ_ROLE +
	CASE WHEN td.CANCEL_DATE IS NOT NULL
		AND (td.BVE_EXISTING = 'NO'
		AND td.BVE_SOLD = 'YES')
		OR (td.BVE_EXISTING = 'YES'
		AND td.ADDL_BVE = 'YES')
		THEN 'BVE'
		ELSE NULL END AS BVE_CANCEL
--CONCATENATION FOR SIP CANCELS
	,p.PR_REG +
	a.ADJ_ROLE +
	CASE WHEN td.CANCEL_DATE IS NOT NULL
		AND (td.SIP_EXISTING = 'NO'
		AND td.SIP_SOLD = 'YES')
		OR (td.SIP_EXISTING = 'YES'
		AND td.ADDL_SIP = 'YES')
		THEN 'SIP'
		ELSE NULL END AS SIP_CANCEL
--PRI MODEL CANCEL CALCULATIONS
	,s.SYS_REG + 
	a.ADJ_ROLE +
	CASE WHEN td.CANCEL_DATE IS NOT NULL
		AND (td.PRI_EXISTING = 'NO'
		AND td.PRI_SOLD = 'YES')
		OR (td.PRI_EXISTING = 'YES'
		AND td.ADDL_PRI = 'YES')
		THEN 'PRI'
		ELSE NULL END AS PRI_MODEL_CANCEL
--BVE MODEL CANCEL CALCULATIONS
	,s.SYS_REG + 
	ISNULL(a.ADJ_ROLE,r.ADJ_ROLE) +
	CASE WHEN td.CANCEL_DATE IS NOT NULL
		AND (td.BVE_EXISTING = 'NO'
		AND td.BVE_SOLD = 'YES')
		OR (td.BVE_EXISTING = 'YES'
		AND td.ADDL_BVE = 'YES')
		THEN 'BVE'
		ELSE NULL END AS BVE_MODEL_CANCEL
--SIP MODEL CANCEL CALCULATIONS
	,s.SYS_REG + 
	a.ADJ_ROLE +
	CASE WHEN td.CANCEL_DATE IS NOT NULL
		AND (td.SIP_EXISTING = 'NO'
		AND td.SIP_SOLD = 'YES')
		OR (td.SIP_EXISTING = 'YES'
		AND td.ADDL_SIP = 'YES')
		THEN 'SIP'
		ELSE NULL END AS SIP_MODEL_CANCEL
--CONCATENATION FOR VIDEO CANCELS
	,s.SYS_REG + 
	a.ADJ_ROLE +
	CASE WHEN td.CANCEL_DATE IS NOT NULL
		AND (td.VIDEO_EXISTING = 'NO'
		AND td.VIDEO_SOLD = 'YES')
		THEN 'VIDEO'
		ELSE NULL END AS VIDEO_CANCEL
--CONCATENATION FOR SMARTOFFICE CANCELS
	,s.SYS_REG + 
	a.ADJ_ROLE +
	CASE WHEN td.CANCEL_DATE IS NOT NULL
		AND (td.SO_EXISTING = 'NO'
		AND td.SO_SOLD = 'YES')
		THEN 'SMARTOFFICE'
		ELSE NULL END AS SO_CANCEL
--TRIPLE PLAY CALCULATION
	,CASE(CASE WHEN td.SALE_DATE IS NOT NULL
		AND (td.DATA_EXISTING = 'NO'
		AND td.DATA_SOLD = 'YES')
		OR (td.DATA_EXISTING = 'YES'
		AND td.ADDL_MODEM = 'YES') THEN 1 ELSE 0 END)
		+(CASE WHEN td.SALE_DATE IS NOT NULL
		AND (td.VOICE_EXISTING = 'NO'
		AND td.VOICE_SOLD = 'YES')
		OR (td.VOICE_EXISTING = 'YES'
		AND td.ADDL_LINES = 'YES') THEN 1 ELSE 0 END)
		+(CASE WHEN td.SALE_DATE IS NOT NULL
		AND (td.PRI_EXISTING = 'NO'
		AND td.PRI_SOLD = 'YES')
		OR (td.PRI_EXISTING = 'YES'
		AND td.ADDL_PRI = 'YES') THEN 1 ELSE 0 END)
		+(CASE WHEN td.SALE_DATE IS NOT NULL
		AND (td.BVE_EXISTING = 'NO'
		AND td.BVE_SOLD = 'YES')
		OR (td.BVE_EXISTING = 'YES'
		AND td.ADDL_BVE = 'YES') THEN 1 ELSE 0 END)
		+(CASE WHEN td.SALE_DATE IS NOT NULL
		AND (td.SIP_EXISTING = 'NO'
		AND td.SIP_SOLD = 'YES')
		OR (td.SIP_EXISTING = 'YES'
		AND td.ADDL_SIP = 'YES') THEN 1 ELSE 0 END)
		+(CASE WHEN td.SALE_DATE IS NOT NULL
		AND (td.VIDEO_EXISTING = 'NO'
		AND td.VIDEO_SOLD = 'YES') THEN 1 ELSE 0 END)
		+(CASE WHEN td.SALE_DATE IS NOT NULL
		AND (td.SO_EXISTING = 'NO'
		AND td.SO_SOLD = 'YES') THEN 1 ELSE 0 END)
		WHEN 5 THEN 'TP Sale' 
		WHEN 4 THEN 'TP Sale'
		WHEN 3 THEN 'TP Sale'
		ELSE 'Not TP Sale' END AS TRIPLE_PLAY
FROM ExternalUser.iCoMP.t_WSTCBSTransactionData AS td
	LEFT JOIN (SELECT DISTINCT	TITLE, EMPLOYEE_PERNR, REGION, PERIODNAME, START_DATE_IN_ROLE_POSITION FROM ExternalUser.iComp.Z_BUS_PAYEEROSTER_WEST_VW) AS pr
		ON td.PERNR = pr.EMPLOYEE_PERNR
	LEFT JOIN #ADJ_ROLE a
		ON td.PERNR = a.ID
	LEFT JOIN #ADJ_ROLE r
		ON pr.TITLE = r.ID
	LEFT JOIN #SYS_REG s
		ON td.CORP_SYSPRIN = s.SYS
	LEFT JOIN #PR_REG p
		ON pr.REGION = p.PR
WHERE (td.SALE_DATE BETWEEN '2018-01-22' AND '2018-02-21'
		OR td.CONNECT_DATE BETWEEN '2018-01-22' AND '2018-02-21'
		OR td.CANCEL_DATE BETWEEN '2018-01-22' AND '2018-02-21'
		) --UPDATE EVERY MONTH
	AND td.SALE_DATE >= pr.START_DATE_IN_ROLE_POSITION
GROUP BY CASE WHEN td.SALE_DATE BETWEEN '2018-01-22' AND '2018-02-21' THEN 'SALE' ELSE NULL END 
	,CASE WHEN td.CONNECT_DATE BETWEEN '2018-01-22' AND '2018-02-21' THEN 'CONNECT' ELSE NULL END 
	,CASE WHEN td.CANCEL_DATE BETWEEN '2018-01-22' AND '2018-02-21' THEN 'CANCEL' ELSE NULL END 
	,td.ORDERID
	,td.PERNR
	,a.ADJ_ROLE
	,td.ACCOUNT_NAME
	,CAST (CASE WHEN td.SALE_DATE = '2018-01-27' THEN '2018-01-26'
		WHEN td.SALE_DATE = '2018-01-28' THEN '2018-01-26'
		WHEN td.SALE_DATE = '2018-02-03' THEN '2018-02-02'
		WHEN td.SALE_DATE = '2018-02-04' THEN '2018-02-02'
		WHEN td.SALE_DATE = '2018-02-10' THEN '2018-02-09'
		WHEN td.SALE_DATE = '2018-02-11' THEN '2018-02-09'
		WHEN td.SALE_DATE = '2018-02-17' THEN '2018-02-16'
		WHEN td.SALE_DATE = '2018-02-18' THEN '2018-02-16'
		ELSE td.SALE_DATE END AS DATE) --UPDATE EVERY MONTH
	,CAST (CASE WHEN td.CONNECT_DATE = '2018-01-27' THEN '2018-01-26'
		WHEN td.CONNECT_DATE = '2018-01-28' THEN '2018-01-26'
		WHEN td.CONNECT_DATE = '2018-02-03' THEN '2018-02-02'
		WHEN td.CONNECT_DATE = '2018-02-04' THEN '2018-02-02'
		WHEN td.CONNECT_DATE = '2018-02-10' THEN '2018-02-09'
		WHEN td.CONNECT_DATE = '2018-02-11' THEN '2018-02-09'
		WHEN td.CONNECT_DATE = '2018-02-17' THEN '2018-02-16'
		WHEN td.CONNECT_DATE = '2018-02-18' THEN '2018-02-16'
		ELSE td.CONNECT_DATE END AS DATE) --UPDATE EVERY MONTH
	,CAST (CASE WHEN td.CANCEL_DATE = '2018-01-27' THEN '2018-01-26'
		WHEN td.CANCEL_DATE = '2018-01-28' THEN '2018-01-26'
		WHEN td.CANCEL_DATE = '2018-02-03' THEN '2018-02-02'
		WHEN td.CANCEL_DATE = '2018-02-04' THEN '2018-02-02'
		WHEN td.CANCEL_DATE = '2018-02-10' THEN '2018-02-09'
		WHEN td.CANCEL_DATE = '2018-02-11' THEN '2018-02-09'
		WHEN td.CANCEL_DATE = '2018-02-17' THEN '2018-02-16'
		WHEN td.CANCEL_DATE = '2018-02-18' THEN '2018-02-16'
		ELSE td.CANCEL_DATE END AS DATE) --UPDATE EVERY MONTH
--CONCATENATION FOR DATA CONNECTS
	,s.SYS_REG + 
	a.ADJ_ROLE +
	CASE WHEN td.CONNECT_DATE IS NOT NULL
		AND (td.DATA_EXISTING = 'NO'
		AND td.DATA_SOLD = 'YES')
		OR (td.DATA_EXISTING = 'YES'
		AND td.ADDL_MODEM = 'YES')
		THEN 'DATA'
		ELSE NULL END
--CONCATENATION FOR VOICE CONNECTS
	,s.SYS_REG + 
	a.ADJ_ROLE ++
	CASE WHEN td.CONNECT_DATE IS NOT NULL
		AND (td.VOICE_EXISTING = 'NO'
		AND td.VOICE_SOLD = 'YES')
		OR (td.VOICE_EXISTING = 'YES'
		AND td.ADDL_LINES = 'YES')
		THEN 'VOICE'
		ELSE NULL END
--CONCATENATION FOR PRI CONNECTS
	,s.SYS_REG + 
	a.ADJ_ROLE +
	CASE WHEN td.CONNECT_DATE IS NOT NULL
		AND (td.PRI_EXISTING = 'NO'
		AND td.PRI_SOLD = 'YES')
		OR (td.PRI_EXISTING = 'YES'
		AND td.ADDL_PRI = 'YES')
		THEN 'PRI'
		ELSE NULL END
--CONCATENATION FOR BVE CONNECTS
	,s.SYS_REG + 
	a.ADJ_ROLE +
	CASE WHEN td.CONNECT_DATE IS NOT NULL
		AND (td.BVE_EXISTING = 'NO'
		AND td.BVE_SOLD = 'YES')
		OR (td.BVE_EXISTING = 'YES'
		AND td.ADDL_BVE = 'YES')
		THEN 'BVE'
		ELSE NULL END
--CONCATENATION FOR SIP CONNECTS
	,s.SYS_REG + 
	a.ADJ_ROLE +
	CASE WHEN td.CONNECT_DATE IS NOT NULL
		AND (td.SIP_EXISTING = 'NO'
		AND td.SIP_SOLD = 'YES')
		OR (td.SIP_EXISTING = 'YES'
		AND td.ADDL_SIP = 'YES')
		THEN 'SIP'
		ELSE NULL END
--CONCATENATION FOR VIDEO CONNECTS
	,s.SYS_REG + 
	a.ADJ_ROLE +
	CASE WHEN td.CONNECT_DATE IS NOT NULL
		AND (td.VIDEO_EXISTING = 'NO'
		AND td.VIDEO_SOLD = 'YES')
		THEN 'VIDEO'
		ELSE NULL END
--CONCATENATION FOR SMARTOFFICE CONNECTS
	,s.SYS_REG + 
	a.ADJ_ROLE +
	CASE WHEN td.CONNECT_DATE IS NOT NULL
		AND (td.SO_EXISTING = 'NO'
		AND td.SO_SOLD = 'YES')
		THEN 'SMARTOFFICE'
		ELSE NULL END
--CONCATENATION FOR DATA SALES
	,s.SYS_REG + 
	a.ADJ_ROLE +
	CASE WHEN td.SALE_DATE IS NOT NULL
		AND (td.DATA_EXISTING = 'NO'
		AND td.DATA_SOLD = 'YES')
		OR (td.DATA_EXISTING = 'YES'
		AND td.ADDL_MODEM = 'YES')
		THEN 'DATA'
		ELSE NULL END
--CONCATENATION FOR VOICE SALES
	,s.SYS_REG + 
	a.ADJ_ROLE +
	CASE WHEN td.SALE_DATE IS NOT NULL
		AND (td.VOICE_EXISTING = 'NO'
		AND td.VOICE_SOLD = 'YES')
		OR (td.VOICE_EXISTING = 'YES'
		AND td.ADDL_LINES = 'YES')
		THEN 'VOICE'
		ELSE NULL END
--CONCATENATION FOR PRI SALES
	,p.PR_REG +
	a.ADJ_ROLE +
	CASE WHEN td.SALE_DATE IS NOT NULL
		AND (td.PRI_EXISTING = 'NO'
		AND td.PRI_SOLD = 'YES')
		OR (td.PRI_EXISTING = 'YES'
		AND td.ADDL_PRI = 'YES')
		THEN 'PRI'
		ELSE NULL END
--CONCATENATION FOR BVE SALES
	,p.PR_REG +
	a.ADJ_ROLE +
	CASE WHEN td.SALE_DATE IS NOT NULL
		AND (td.BVE_EXISTING = 'NO'
		AND td.BVE_SOLD = 'YES')
		OR (td.BVE_EXISTING = 'YES'
		AND td.ADDL_BVE = 'YES')
		THEN 'BVE'
		ELSE NULL END
--CONCATENATION FOR SIP SALES
	,p.PR_REG +
	a.ADJ_ROLE +
	CASE WHEN td.SALE_DATE IS NOT NULL
		AND (td.SIP_EXISTING = 'NO'
		AND td.SIP_SOLD = 'YES')
		OR (td.SIP_EXISTING = 'YES'
		AND td.ADDL_SIP = 'YES')
		THEN 'SIP'
		ELSE NULL END
--PRI MODEL SALE CALCULATIONS
	,s.SYS_REG + 
	a.ADJ_ROLE +
	CASE WHEN td.SALE_DATE IS NOT NULL
		AND (td.PRI_EXISTING = 'NO'
		AND td.PRI_SOLD = 'YES')
		OR (td.PRI_EXISTING = 'YES'
		AND td.ADDL_PRI = 'YES')
		THEN 'PRI'
		ELSE NULL END
--BVE MODEL SALE CALCULATIONS
	,s.SYS_REG + 
	a.ADJ_ROLE +
	CASE WHEN td.SALE_DATE IS NOT NULL
		AND (td.BVE_EXISTING = 'NO'
		AND td.BVE_SOLD = 'YES')
		OR (td.BVE_EXISTING = 'YES'
		AND td.ADDL_BVE = 'YES')
		THEN 'BVE'
		ELSE NULL END
--SIP MODEL SALE CALCULATIONS
	,s.SYS_REG + 
	a.ADJ_ROLE +
	CASE WHEN td.SALE_DATE IS NOT NULL
		AND (td.SIP_EXISTING = 'NO'
		AND td.SIP_SOLD = 'YES')
		OR (td.SIP_EXISTING = 'YES'
		AND td.ADDL_SIP = 'YES')
		THEN 'SIP'
		ELSE NULL END
--CONCATENATION FOR VIDEO SALES
	,s.SYS_REG + 
	a.ADJ_ROLE +
	CASE WHEN td.SALE_DATE IS NOT NULL
		AND (td.VIDEO_EXISTING = 'NO'
		AND td.VIDEO_SOLD = 'YES')
		THEN 'VIDEO'
		ELSE NULL END
--CONCATENATION FOR SMARTOFFICE SALES
	,s.SYS_REG + 
	a.ADJ_ROLE +
	CASE WHEN td.SALE_DATE IS NOT NULL
		AND (td.SO_EXISTING = 'NO'
		AND td.SO_SOLD = 'YES')
		THEN 'SMARTOFFICE'
		ELSE NULL END
--CONCATENATION FOR DATA CANCELS
	,s.SYS_REG + 
	a.ADJ_ROLE +
	CASE WHEN td.CANCEL_DATE IS NOT NULL
		AND (td.DATA_EXISTING = 'NO'
		AND td.DATA_SOLD = 'YES')
		OR (td.DATA_EXISTING = 'YES'
		AND td.ADDL_MODEM = 'YES')
		THEN 'DATA'
		ELSE NULL END
--CONCATENATION FOR VOICE CANCELS
	,s.SYS_REG + 
	a.ADJ_ROLE +
	CASE WHEN td.CANCEL_DATE IS NOT NULL
		AND (td.VOICE_EXISTING = 'NO'
		AND td.VOICE_SOLD = 'YES')
		OR (td.VOICE_EXISTING = 'YES'
		AND td.ADDL_LINES = 'YES')
		THEN 'VOICE'
		ELSE NULL END
--CONCATENATION FOR PRI CANCELS
	,p.PR_REG +
	a.ADJ_ROLE +
	CASE WHEN td.CANCEL_DATE IS NOT NULL
		AND (td.PRI_EXISTING = 'NO'
		AND td.PRI_SOLD = 'YES')
		OR (td.PRI_EXISTING = 'YES'
		AND td.ADDL_PRI = 'YES')
		THEN 'PRI'
		ELSE NULL END
--CONCATENATION FOR BVE CANCELS
	,p.PR_REG +
	a.ADJ_ROLE +
	CASE WHEN td.CANCEL_DATE IS NOT NULL
		AND (td.BVE_EXISTING = 'NO'
		AND td.BVE_SOLD = 'YES')
		OR (td.BVE_EXISTING = 'YES'
		AND td.ADDL_BVE = 'YES')
		THEN 'BVE'
		ELSE NULL END
--CONCATENATION FOR SIP CANCELS
	,p.PR_REG +
	a.ADJ_ROLE +
	CASE WHEN td.CANCEL_DATE IS NOT NULL
		AND (td.SIP_EXISTING = 'NO'
		AND td.SIP_SOLD = 'YES')
		OR (td.SIP_EXISTING = 'YES'
		AND td.ADDL_SIP = 'YES')
		THEN 'SIP'
		ELSE NULL END
--PRI MODEL CANCEL CALCULATIONS
	,s.SYS_REG + 
	a.ADJ_ROLE +
	CASE WHEN td.CANCEL_DATE IS NOT NULL
		AND (td.PRI_EXISTING = 'NO'
		AND td.PRI_SOLD = 'YES')
		OR (td.PRI_EXISTING = 'YES'
		AND td.ADDL_PRI = 'YES')
		THEN 'PRI'
		ELSE NULL END
--BVE MODEL CANCEL CALCULATIONS
	,s.SYS_REG + 
	ISNULL(a.ADJ_ROLE,r.ADJ_ROLE) +
	CASE WHEN td.CANCEL_DATE IS NOT NULL
		AND (td.BVE_EXISTING = 'NO'
		AND td.BVE_SOLD = 'YES')
		OR (td.BVE_EXISTING = 'YES'
		AND td.ADDL_BVE = 'YES')
		THEN 'BVE'
		ELSE NULL END
--SIP MODEL CANCEL CALCULATIONS
	,s.SYS_REG + 
	a.ADJ_ROLE +
	CASE WHEN td.CANCEL_DATE IS NOT NULL
		AND (td.SIP_EXISTING = 'NO'
		AND td.SIP_SOLD = 'YES')
		OR (td.SIP_EXISTING = 'YES'
		AND td.ADDL_SIP = 'YES')
		THEN 'SIP'
		ELSE NULL END
--CONCATENATION FOR VIDEO CANCELS
	,s.SYS_REG + 
	a.ADJ_ROLE +
	CASE WHEN td.CANCEL_DATE IS NOT NULL
		AND (td.VIDEO_EXISTING = 'NO'
		AND td.VIDEO_SOLD = 'YES')
		THEN 'VIDEO'
		ELSE NULL END
--CONCATENATION FOR SMARTOFFICE CANCELS
	,s.SYS_REG + 
	a.ADJ_ROLE +
	CASE WHEN td.CANCEL_DATE IS NOT NULL
		AND (td.SO_EXISTING = 'NO'
		AND td.SO_SOLD = 'YES')
		THEN 'SMARTOFFICE'
		ELSE NULL END
--TRIPLE PLAY CALCULATION
	,CASE(CASE WHEN td.SALE_DATE IS NOT NULL
		AND (td.DATA_EXISTING = 'NO'
		AND td.DATA_SOLD = 'YES')
		OR (td.DATA_EXISTING = 'YES'
		AND td.ADDL_MODEM = 'YES') THEN 1 ELSE 0 END)
		+(CASE WHEN td.SALE_DATE IS NOT NULL
		AND (td.VOICE_EXISTING = 'NO'
		AND td.VOICE_SOLD = 'YES')
		OR (td.VOICE_EXISTING = 'YES'
		AND td.ADDL_LINES = 'YES') THEN 1 ELSE 0 END)
		+(CASE WHEN td.SALE_DATE IS NOT NULL
		AND (td.PRI_EXISTING = 'NO'
		AND td.PRI_SOLD = 'YES')
		OR (td.PRI_EXISTING = 'YES'
		AND td.ADDL_PRI = 'YES') THEN 1 ELSE 0 END)
		+(CASE WHEN td.SALE_DATE IS NOT NULL
		AND (td.BVE_EXISTING = 'NO'
		AND td.BVE_SOLD = 'YES')
		OR (td.BVE_EXISTING = 'YES'
		AND td.ADDL_BVE = 'YES') THEN 1 ELSE 0 END)
		+(CASE WHEN td.SALE_DATE IS NOT NULL
		AND (td.SIP_EXISTING = 'NO'
		AND td.SIP_SOLD = 'YES')
		OR (td.SIP_EXISTING = 'YES'
		AND td.ADDL_SIP = 'YES') THEN 1 ELSE 0 END)
		+(CASE WHEN td.SALE_DATE IS NOT NULL
		AND (td.VIDEO_EXISTING = 'NO'
		AND td.VIDEO_SOLD = 'YES') THEN 1 ELSE 0 END)
		+(CASE WHEN td.SALE_DATE IS NOT NULL
		AND (td.SO_EXISTING = 'NO'
		AND td.SO_SOLD = 'YES') THEN 1 ELSE 0 END)
		WHEN 5 THEN 'TP Sale' 
		WHEN 4 THEN 'TP Sale'
		WHEN 3 THEN 'TP Sale'
		ELSE 'Not TP Sale' END
ORDER BY td.ORDERID